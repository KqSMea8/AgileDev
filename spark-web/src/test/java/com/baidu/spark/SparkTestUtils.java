package com.baidu.spark;

import static com.baidu.spark.TestUtils.clearTable;

import java.io.Serializable;
import java.sql.Connection;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;
import org.springframework.security.acls.domain.PrincipalSid;
import org.springframework.security.acls.model.Permission;
import org.springframework.util.Assert;

import com.baidu.spark.model.Group;
import com.baidu.spark.model.Space;
import com.baidu.spark.model.User;
import com.baidu.spark.model.card.Card;
import com.baidu.spark.security.SparkAclHandlerService;
import com.baidu.spark.security.SparkSystemResource;
import com.baidu.spark.security.principalsid.GroupPrincipalSid;
import com.baidu.spark.security.principalsid.UserPrincipalSid;
import com.baidu.spark.service.UserService;
import com.baidu.spark.util.SparkConfig;
/**
 * 权限测试工具类
 * @author zhangjing_pe
 *
 */
public class SparkTestUtils {
	
	private static final String CREATE_ACLDB_SQL = "create table acl_sid("
			+"    id bigint generated by default as identity(start with 100) not null primary key,"
			+"    principal boolean not null,"
			+"    sid varchar_ignorecase(100) not null,"
			+"    constraint unique_uk_1 unique(sid,principal));"
			+""
			+"create table acl_class("
			+"    id bigint generated by default as identity(start with 100) not null primary key,"
			+"    class varchar_ignorecase(100) not null,"
			+"    constraint unique_uk_2 unique(class)"
			+");"
			+"create table acl_object_identity("
			+"    id bigint generated by default as identity(start with 100) not null primary key,"
			+"    object_id_class bigint not null,"
			+"    object_id_identity bigint not null,"
			+"    parent_object bigint,"
			+"    owner_sid bigint,"
			+"    entries_inheriting boolean not null,"
			+"    constraint unique_uk_3 unique(object_id_class,object_id_identity),"
			+"    constraint foreign_fk_1 foreign key(parent_object)references acl_object_identity(id),"
			+"    constraint foreign_fk_2 foreign key(object_id_class)references acl_class(id),"
			+"    constraint foreign_fk_3 foreign key(owner_sid)references acl_sid(id)"
			+");"
			+"create table acl_entry("
			+"    id bigint generated by default as identity(start with 100) not null primary key,"
			+"    acl_object_identity bigint not null,"
			+"    ace_order int not null,"
			+"    sid bigint not null,"
			+"    mask integer not null,"
			+"    granting boolean not null,"
			+"    audit_success boolean not null,"
			+"    audit_failure boolean not null,"
			+"    constraint unique_uk_4 unique(acl_object_identity,ace_order),"
			+"    constraint foreign_fk_4 foreign key(acl_object_identity) references acl_object_identity(id),"
			+"    constraint foreign_fk_5 foreign key(sid) references acl_sid(id)"
			+");";

	private static void clearAclDatabase(DataSource dataSource) throws Exception {
		clearTable(dataSource, "acl_entry");
		clearTable(dataSource,"acl_object_identity");
		clearTable(dataSource,"acl_class");
		clearTable(dataSource,"acl_sid");
	}
	
	/**
	 * 初始化acl数据库。如果库不存在，则创建库；若库已存在，则清理表的数据
	 * @param dataSource
	 * @throws Exception
	 */
	public static void initAclDatabase(DataSource dataSource) throws Exception {
		String setForeignKeyConstraintFalseHsql = "SET REFERENTIAL_INTEGRITY FALSE";
		String setForeignKeyConstraintTrueHsql = "SET REFERENTIAL_INTEGRITY TRUE";

		
		Connection conn = null;
		try {
			conn = dataSource.getConnection();
			
			Statement stmt = conn.createStatement();
			// 处理前先关闭外键检查
			stmt.execute(setForeignKeyConstraintFalseHsql);
			try{
				stmt.executeQuery("select * from acl_sid");
				clearAclDatabase(dataSource);
			}catch(java.sql.SQLException e){
				//表不存在，先创建表
				stmt.execute(CREATE_ACLDB_SQL);
			}
			// 处理后重新开启
			stmt.execute(setForeignKeyConstraintTrueHsql);
		} finally {
			if (conn != null) {
				conn.close();
			}
		}
	}
	/**
	 * 验证是否有某principal
	 * @param jdbcTemplate
	 * @param principal
	 * @param sid
	 */
	public static void assertHasSid(SimpleJdbcTemplate jdbcTemplate,int principal,String sid){
		int sidId = 0;
		try{
			sidId = jdbcTemplate.queryForInt("select id from acl_sid where principal = ? and sid = ?", principal,sid);
		}catch(Exception e){
			throw new AssertionError("sid not found! principal:" + principal+ " sid:"+sid);
		}
		if(sidId <= 0){
			throw new AssertionError("sid not found! principal:" + principal+ " sid:"+sid);
		}
	}
	
	
	
	/**
	 * 验证是否有某principal
	 * @param jdbcTemplate
	 * @param principal
	 * @param sid
	 */
	public static void assertHasObjectIdentity(SimpleJdbcTemplate jdbcTemplate,Class clazz,Serializable id){
		try{
		int classId = jdbcTemplate.queryForInt("select id from acl_class where class=?",clazz.getName());
		int i = jdbcTemplate
				.queryForInt(
						"select id from acl_object_identity where object_id_class =? and object_id_identity = ?",
						classId, id);
		}catch(Exception e){
			throw new AssertionError("ObjectIdentity not found! class:" + clazz + " id:"+id);
		}

	}
	
	/**
	 * 获取指定sid对于资源的mask
	 * @param jdbcTemplate
	 * @param sid
	 * @param objClass
	 * @param objectIdentity
	 * @return
	 */
	public static int getMask(SimpleJdbcTemplate jdbcTemplate,PrincipalSid sid,Class objClass,Serializable objectIdentity){
		try{
			int sidId = jdbcTemplate.queryForInt("select id from acl_sid where principal = 1 and sid = ?", sid.getPrincipal());
			int classId = jdbcTemplate.queryForInt("select id from acl_class where class = ?", objClass.getName());
			int objectId = jdbcTemplate.queryForInt("select id from acl_object_identity where object_id_class = ? and object_id_identity = ?", classId,objectIdentity);
			int permission = jdbcTemplate.queryForInt("select mask from acl_entry where sid = ? and acl_object_identity = ?", sidId,objectId);
			return permission;
		}catch(EmptyResultDataAccessException e){
			return 0;
		}
	}
	/**
	 * 为指定用户及指定卡片添加指定权限
	 * @param permissionService
	 * @param user
	 * @param card
	 * @param mask
	 */
	public static void addUserPermission(SparkAclHandlerService permissionService,User user,Card card,Permission permission ){
		UserPrincipalSid sid = new UserPrincipalSid(user.getId());
		List<Integer> masks = new ArrayList<Integer>();
		masks.add(permission.getMask());
		permissionService.updatePermission(sid, card.getClass(), card.getId(), masks);
	}
	/**
	 * 为指定用户及指定空间添加指定权限
	 * @param permissionService
	 * @param user
	 * @param space
	 * @param mask
	 */
	public static void addUserPermission(SparkAclHandlerService permissionService,User user,Space space,Permission permission ){
		UserPrincipalSid sid = new UserPrincipalSid(user.getId());
		List<Integer> masks = new ArrayList<Integer>();
		masks.add(permission.getMask());
		permissionService.updatePermission(sid, space.getClass(), space.getId(), masks);
	}
	
	/**
	 * 为指定用户添加系统级别的指定权限
	 * @param permissionService
	 * @param user
	 * @param space
	 * @param mask
	 */
	public static void addUserSystemPermission(SparkAclHandlerService permissionService,User user,Permission permission){
		UserPrincipalSid sid = new UserPrincipalSid(user.getId());
		List<Integer> masks = new ArrayList<Integer>();
		masks.add(permission.getMask());
		permissionService.updatePermission(sid, SparkSystemResource.class, SparkSystemResource.getResource().getId(), masks);
	}
	
	/**
	 * 为指定用户组和指定卡片添加权限
	 * @param permissionService
	 * @param group
	 * @param card
	 * @param mask
	 */
	public static void addGroupPermission(SparkAclHandlerService permissionService,Group group,Card card,Permission permission ){
		GroupPrincipalSid sid = new GroupPrincipalSid(group.getId());
		List<Integer> masks = new ArrayList<Integer>();
		masks.add(permission.getMask());
		permissionService.updatePermission(sid, card.getClass(), card.getId(), masks);
	}
	/**
	 * 为指定用户组和指定空间添加权限
	 * @param permissionService
	 * @param group
	 * @param space
	 * @param mask
	 */
	public static void addGroupPermission(SparkAclHandlerService permissionService,Group group,Space space,Permission permission){
		GroupPrincipalSid sid = new GroupPrincipalSid(group.getId());
		List<Integer> masks = new ArrayList<Integer>();
		masks.add(permission.getMask());
		permissionService.updatePermission(sid, space.getClass(), space.getId(), masks);
	}
	
	/**
	 * 为指定用户组添加系统级别的指定权限
	 * @param permissionService
	 * @param Group
	 * @param mask
	 */
	public static void addGroupSystemPermission(SparkAclHandlerService permissionService,Group group,Permission permission){
		GroupPrincipalSid sid = new GroupPrincipalSid(group.getId());
		List<Integer> masks = new ArrayList<Integer>();
		masks.add(permission.getMask());
		permissionService.updatePermission(sid, SparkSystemResource.class, SparkSystemResource.getResource().getId(), masks);
	}
	/**
	 * 设置当前操作用户为管理员，便于进行功能测试
	 */
	public static void setCurrentUserAdmin(UserService userService){
		String[] adminAccount = SparkConfig.getDefaultAdminAccountConf().split(",");
		Assert.notEmpty(adminAccount);
		User user = null;
		for(String accout:adminAccount){
			user = userService.getUserByUserName(accout);
			if(user != null){
				break;
			}
		}
		if(user == null){
			throw new AssertionError("no admin account found! check your user in database and properties config");
		}
		TestUtils.setCurrentUser(user);
	}
	
	/**
	 * 清理所有业务数据表数据
	 * @param dataSource
	 * @throws Exception
	 */
	public static void clearAllTable(DataSource dataSource) throws Exception{
		clearTable(dataSource, "card_property_value");
		clearTable(dataSource, "card_property");
		clearTable(dataSource, "card_type");
		clearTable(dataSource, "card_history");
		clearTable(dataSource, "card");
		clearTable(dataSource, "space_sequence");
		clearTable(dataSource, "spaces");
		clearTable(dataSource, "users");
		clearTable(dataSource, "group_space");
		clearTable(dataSource, "group_user");
		clearTable(dataSource, "groups");
		clearTable(dataSource, "icafe_project");
		clearTable(dataSource, "view");
		initAclDatabase(dataSource);
	}
}
